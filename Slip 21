#include <stdio.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <string.h>

// Structure to store file information
typedef struct {
  char *fileName;
  long fileSize;
} FileInfo;

// Function to compare files by size
int compareFileSizes(const void *a, const void *b) {
  const FileInfo *fa = (const FileInfo *)a;
  const FileInfo *fb = (const FileInfo *)b;
  return (fa->fileSize - fb->fileSize);
}

int main(int argc, char *argv[]) {
  if (argc < 2) {
    printf("Usage: %s <file1> [file2 ...]\n", argv[0]);
    exit(1);
  }

  // Allocate an array of FileInfo structures
  FileInfo *fileInfos = malloc((argc - 1) * sizeof(FileInfo));

  // Get file information for each argument
  for (int i = 1; i < argc; i++) {
    struct stat statbuf;

    if (stat(argv[i], &statbuf) == -1) {
      perror(argv[i]);
      exit(1);
    }

    fileInfos[i - 1].fileName = strdup(argv[i]);
    fileInfos[i - 1].fileSize = statbuf.st_size;
  }

  // Sort file information by size
  qsort(fileInfos, argc - 1, sizeof(FileInfo), compareFileSizes);

  // Print filenames in ascending order
  for (int i = 0; i < argc - 1; i++) {
    printf("%s (%ld bytes)\n", fileInfos[i].fileName, fileInfos[i].fileSize);
  }

  // Free allocated memory
  for (int i = 0; i < argc - 1; i++) {
    free(fileInfos[i].fileName);
  }
  free(fileInfos);

  return 0;
}

Q1-
#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

int main() {
    DIR *directory;
    struct dirent *entry;
    int fileCount = 0;

    // Open the current directory
    directory = opendir(".");

    if (directory == NULL) {
        perror("Unable to open directory");
        exit(EXIT_FAILURE);
    }

    // Read directory entries
    while ((entry = readdir(directory)) != NULL) {
        // Skip "." and ".." entries
        if (entry->d_type == DT_REG) {
            printf("%s\n", entry->d_name);
            fileCount++;
        }
    }

    // Close the directory
    closedir(directory);

    // Display the total number of files
    printf("\nTotal number of files: %d\n", fileCount);

    return 0;
}
